// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================
// ENUMS
// ===========================================
enum SubscriptionPaymentStatus {
  Pending
  Succeed
  Failed
  Canceled
}

enum ContactServiceType {
  VENDOR
  CUSTOMER
  EMPLOYEE
  OTHER
}

enum VendorStatus {
  overdue
  unpaid
}

enum DiscountType {
  Amount
  Percentage
}

// ===========================================
// BUSINESS MODELS
// ===========================================

model Option {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  group     String
  key       String
  value     String   @default("") // Can store as stringified JSON or basic value
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, group, key]) // Prevent duplicate settings per tenant
  @@map("options") // Maps to actual DB table name
}

model BankRule {
  id                      Int       @id @default(autoincrement())                    // Primary key
  name                    String                                                    // Name of the rule (e.g., "Uber Rides")
  order                   Int                                                       // Order of rule execution
  applyIfAccountId        Int                                                       // Account this rule applies to
  applyIfTransactionType  String                                                    // E.g., "expense", "income"
  assignCategory          String                                                    // Category to assign
  assignAccountId         Int?                                                      // Account to assign
  assignPayee             String?                                                   // Payee to assign
  assignMemo              String?                                                   // Memo to assign
  conditionsType          String                                                    // Type of condition grouping (e.g., "all", "any")

  // Timestamps
  createdAt               DateTime  @default(now())                                 // Record creation timestamp
  updatedAt               DateTime  @updatedAt                                      // Auto-updated timestamp

  // Relations
  conditions              BankRuleCondition[]                                       // Rule has many conditions
  assignAccount           Account?     @relation(fields: [assignAccountId], references: [id])

  @@map("bank_rules")
}

model BankRuleCondition {
  id        Int      @id @default(autoincrement())                                 // Primary key
  ruleId    Int                                                             // Foreign key to BankRule
  field     String                                                          // Field to check (e.g., "memo")
  operator  String                                                          // Operator (e.g., "contains", "equals")
  value     String                                                          // Value to match

  // Relation
  rule      BankRule  @relation(fields: [ruleId], references: [id])         // Belongs to BankRule

  @@map("bank_rule_conditions")
}

model Contact {
  id                            Int       @id @default(autoincrement())
  contactService                String    @map("contact_service") // should be 'customer'
  customerType                  String?   @map("customer_type")   // 'business' or 'individual'
  firstName                     String?   @map("first_name")
  lastName                      String?   @map("last_name")
  displayName                   String    @map("display_name")
  email                         String?   @map("email")
  workPhone                     String?   @map("work_phone")
  personalPhone                 String?   @map("personal_phone")
  companyName                   String?   @map("company_name")
  website                       String?   @map("website")
  note                          String?   @map("note")
  balance                       Decimal   @default(0) @map("balance")
  openingBalance                Decimal   @default(0) @map("opening_balance")
  openingBalanceAt              DateTime? @map("opening_balance_at")
  openingBalanceExchangeRate    Float?    @map("opening_balance_exchange_rate")
  currencyCode                  String?   @map("currency_code")
  active                        Boolean   @default(true) @map("active")

  // Billing Address
  billingAddress1               String?   @map("billing_address1")
  billingAddress2               String?   @map("billing_address2")
  billingAddressCity            String?   @map("billing_address_city")
  billingAddressState           String?   @map("billing_address_state")
  billingAddressCountry         String?   @map("billing_address_country")
  billingAddressPostcode        String?   @map("billing_address_postcode")
  billingAddressPhone           String?   @map("billing_address_phone")

  // Shipping Address
  shippingAddress1              String?   @map("shipping_address1")
  shippingAddress2              String?   @map("shipping_address2")
  shippingAddressCity           String?   @map("shipping_address_city")
  shippingAddressState          String?   @map("shipping_address_state")
  shippingAddressCountry        String?   @map("shipping_address_country")
  shippingAddressPostcode       String?   @map("shipping_address_postcode")
  shippingAddressPhone          String?   @map("shipping_address_phone")

  createdAt                     DateTime  @default(now()) @map("created_at")
  updatedAt                     DateTime  @updatedAt      @map("updated_at")

  currency                      Currency? @relation(fields: [currencyCode], references: [code])

  @@map("contacts") // actual table name
}


model PaymentIntegration {
  id             Int       @id @default(autoincrement())                // Primary key
  service        String                                               // Name of payment provider
  paymentEnabled Boolean                                              // Whether payment receiving is allowed
  payoutEnabled  Boolean                                              // Whether payouts are enabled
  accountId      String?                                              // External account ID (e.g., from Stripe)
  options        Json?                                                // Additional config (bankAccountId, etc.)
  createdAt      DateTime  @default(now())                            // When the record was created
  updatedAt      DateTime  @updatedAt                                 // Auto-managed updated timestamp

  @@map("payment_integrations")
}


model PaymentReceive {
  id                 String   @id @default(uuid())
  tenantId           String
  customerId         String?
  depositAccountId   String?
  branchId           String?
  pdfTemplateId      String?

  paymentReceiveNo   String?
  referenceNo        String?
  statement          String?
  amount             Float    @default(0)
  paymentAmount      Float    @default(0)
  exchangeRate       Float    @default(1)
  date               DateTime
  notes              String?
  isDraft            Boolean  @default(false)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  customer           Contact?    @relation(fields: [customerId], references: [id])
  depositAccount     Account?    @relation(fields: [depositAccountId], references: [id])
  branch             Branch?     @relation(fields: [branchId], references: [id])
  pdfTemplate        PdfTemplate? @relation(fields: [pdfTemplateId], references: [id])

  entries            PaymentReceiveEntry[]
  transactions       AccountTransaction[] @relation("PaymentReceiveTransactions")
  attachments        DocumentLink[]       @relation("PaymentReceiveDocuments")

  @@map("payment_receives")
}

model ItemCategory {
  id          Int      @id @default(autoincrement())
  tenantId    Int
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items       Item[]

  @@map("items_categories")
}

model Media {
  id        Int          @id @default(autoincrement())
  tenantId  Int                              // For multi-tenant isolation
  name      String?                          // Optional name or label of the media
  type      String?                          // Type: e.g. 'image', 'video', 'document'
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  links     MediaLink[]                      // One media can have multiple links
}

model MediaLink {
  id        Int       @id @default(autoincrement())
  tenantId  Int                           // For multi-tenant isolation
  mediaId   Int                           // Foreign key to Media
  url       String                        // Actual URL or path to the media file
  label     String?                       // Optional label like 'thumbnail', 'preview', etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  media     Media     @relation(fields: [mediaId], references: [id])
}

model PdfTemplate {
  id           Int      @id @default(autoincrement())
  templateName String
  attributes   Json?
  default      Boolean?  // inferred from `modifiers.default`
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("pdf_templates")
}


model Role {
  id           Int               @id @default(autoincrement())
  tenantId     Int              // Foreign key for multitenancy
  name         String
  // Add other fields here like description if needed

  permissions  RolePermission[] // 1-to-many relation to RolePermission

  // Optionally track creation/update timestamps
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("roles")
}


model RolePermission {
  id         Int    @id @default(autoincrement())
  roleId     Int
  permission String
  tenantId   String
  tenant     Tenant @relation(fields: [tenantId], references: [id])
  role       Role   @relation(fields: [roleId], references: [id])

  createdAt  DateTime? @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  @@map("role_permissions")
}

model Document {
  id          Int              @id @default(autoincrement())       // Primary key
  tenantId    Int                                                  // Tenant-scoped
  createdAt   DateTime         @default(now())                     // Timestamp of creation
  updatedAt   DateTime         @updatedAt                          // Timestamp of last update

  // Relations
  documentLinks DocumentLink[]                                    // One-to-many relation

  @@map("documents")                                               // Maps to documents table
}

model DocumentLink {
  id          Int       @id @default(autoincrement())              // Primary key
  tenantId    Int                                               // Tenant-scoped
  documentId  Int                                               // FK to documents.id
  createdAt   DateTime   @default(now())                          // Timestamp of creation
  updatedAt   DateTime   @updatedAt                               // Timestamp of last update

  // Relations
  document    Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_links")                                         // Maps to document_links table
}

model Currency {
  id         Int      @id @default(autoincrement())                  // Primary key
  code       String                                                // ISO currency code (e.g., "USD")
  name       String                                                // Name of currency (e.g., "US Dollar")
  symbol     String?                                               // Optional symbol (e.g., "$")
  createdAt  DateTime  @default(now())                             // Timestamp when added
  updatedAt  DateTime  @updatedAt                                  // Auto-updated timestamp
  @@map("currencies") // Maps to actual table name
}



model ExchangeRate {
  id           Int       @id @default(autoincrement())
  currencyId   Int                                            // FK to Currency
  exchangeRate Float      @map("exchange_rate")               // Actual rate value
  date         DateTime                                       // Date the rate applies to
  createdAt    DateTime   @default(now()) @map("created_at")  // When inserted
  updatedAt    DateTime   @updatedAt

  currency     Currency   @relation(fields: [currencyId], references: [id])

  @@map("exchange_rates")
}



model AccountTransaction {
  id               Int            @id @default(autoincrement())
  accountId        Int
  contactId        Int?
  taxRateId        Int?
  exchangeRateId   Int?
  referenceType    String
  transactionType  String
  credit           Float          @default(0)
  debit            Float          @default(0)
  date             DateTime
  createdAt        DateTime       @default(now())

  // Relations
  account          Account        @relation(fields: [accountId], references: [id])
  contact          Contact?       @relation(fields: [contactId], references: [id])
  taxRate          TaxRate?       @relation(fields: [taxRateId], references: [id])
  exchangeRate     ExchangeRate?  @relation(fields: [exchangeRateId], references: [id])

  @@map("accounts_transactions")
}



model SaleReceipt {
  id                String               @id @default(uuid())
  receiptNumber     String?
  referenceNo       String?
  amount            Float
  exchangeRate      Float
  discount          Float?
  discountType      DiscountType?
  adjustment        Float?
  closedAt          DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  customerId        String?
  depositAccountId  String?
  branchId          String?
  warehouseId       String?

  customer          Contact?            @relation(fields: [customerId], references: [id])
  depositAccount    Account?            @relation(fields: [depositAccountId], references: [id])
  branch            Branch?             @relation(fields: [branchId], references: [id])
  warehouse         Warehouse?          @relation(fields: [warehouseId], references: [id])

  entries           ItemEntry[]         @relation("SaleReceiptEntries")
  transactions      AccountTransaction[]@relation("SaleReceiptTransactions")
  attachments       Document[]          @relation("SaleReceiptAttachments", through: DocumentLink)

  @@map("sales_receipts")
}

model SaleReceiptEntry {
  id               Int          @id @default(autoincrement())
  saleReceiptId    Int

  saleReceipt      SaleReceipt  @relation(fields: [saleReceiptId], references: [id])

  @@map("sales_receipt_entries")
}

model SaleInvoice {
  id                           String     @id @default(cuid())
  customerId                  String?
  branchId                    String?
  warehouseId                 String?
  writtenoffExpenseAccountId  String?
  pdfTemplateId               String?
  invoiceNo                   String
  referenceNo                 String?
  invoiceDate                 DateTime?
  dueDate                     DateTime?
  deliveredAt                 DateTime?
  writtenoffAt                DateTime?
  discount                    Float?
  discountType                String?
  adjustment                  Float?
  balance                     Float?
  paymentAmount               Float?
  creditedAmount              Float?
  writtenoffAmount            Float?
  exchangeRate                Float?
  taxAmountWithheld           Float?
  isInclusiveTax              Boolean?
  createdAt                   DateTime   @default(now())
  updatedAt                   DateTime   @updatedAt

  // Relations
  customer                    Contact?   @relation(fields: [customerId], references: [id])
  branch                      Branch?    @relation(fields: [branchId], references: [id])
  warehouse                   Warehouse? @relation(fields: [warehouseId], references: [id])
  writtenoffExpenseAccount    Account?   @relation(fields: [writtenoffExpenseAccountId], references: [id])
  pdfTemplate                 PdfTemplate? @relation(fields: [pdfTemplateId], references: [id])

  entries                     ItemEntry[]        @relation("SaleInvoiceEntries")
  transactions                AccountTransaction[] @relation("SaleInvoiceTransactions")
  costTransactions           InventoryCostLotTracker[] @relation("SaleInvoiceCostTransactions")
  paymentEntries              PaymentReceiveEntry[] @relation("SaleInvoicePayments")
  taxes                       TaxRateTransaction[] @relation("SaleInvoiceTaxes")
  attachments                 Document[]          @relation("SaleInvoiceAttachments")
  matchedBankTransaction      MatchedBankTransaction[] @relation("SaleInvoiceBankMatch")
  paymentMethods              TransactionPaymentServiceEntry[] @relation("SaleInvoicePaymentMethods")

  @@map("sales_invoices")
}

model Item {
  id                   String   @id @default(uuid())
  type                 String
  name                 String
  code                 String?
  sellable             Boolean  @default(false)
  purchasable          Boolean  @default(false)
  sellPrice            Float?
  costPrice            Float?
  sellDescription      String?
  purchaseDescription  String?
  quantityOnHand       Float?   // Cached value
  note                 String?
  active               Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Foreign Keys
  costAccountId        String?
  sellAccountId        String?
  inventoryAccountId   String?
  categoryId           String?
  sellTaxRateId        String?
  purchaseTaxRateId    String?

  // Relations
  costAccount          Account?       @relation("CostAccount", fields: [costAccountId], references: [id])
  sellAccount          Account?       @relation("SellAccount", fields: [sellAccountId], references: [id])
  inventoryAccount     Account?       @relation("InventoryAccount", fields: [inventoryAccountId], references: [id])
  category             ItemCategory?  @relation(fields: [categoryId], references: [id])
  sellTaxRate          TaxRate?       @relation("SellTax", fields: [sellTaxRateId], references: [id])
  purchaseTaxRate      TaxRate?       @relation("PurchaseTax", fields: [purchaseTaxRateId], references: [id])

  itemWarehouses       ItemWarehouseQuantity[]
  itemEntries          ItemEntry[]
  warehouseTransfers   WarehouseTransferEntry[]
  inventoryAdjustments InventoryAdjustmentEntry[]

  mediaLinks           MediaLink[]    // Join table
}

model ItemWarehouseQuantity {
  id          Int       @id @default(autoincrement())
  itemId      Int
  warehouseId Int
  quantity    Int

  item        Item      @relation(fields: [itemId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([itemId, warehouseId]) // Optional: prevent duplicate item/warehouse combo
  @@map("items_warehouses_quantity")
}

model Warehouse {
  id                      String                  @id @default(cuid())
  tenantId                String
  name                    String
  primary                 Boolean                 @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  // Relations
  tenant                  Tenant                  @relation(fields: [tenantId], references: [id])

  // Sales
  invoices                SaleInvoice[]
  estimates               SaleEstimate[]
  receipts                SaleReceipt[]

  // Purchases
  bills                   Bill[]
  creditNotes             CreditNote[]
  vendorCredits           VendorCredit[]

  // Inventory
  inventoryTransactions   InventoryTransaction[]
  inventoryAdjustments    InventoryAdjustment[]

  // Transfers
  warehouseTransferFrom   WarehouseTransfer[]     @relation("FromWarehouse")
  warehouseTransferTo     WarehouseTransfer[]     @relation("ToWarehouse")
}

model WarehouseTransfer {
  id                 String                  @id @default(cuid())
  tenantId           String
  fromWarehouseId    String
  toWarehouseId      String
  date               DateTime?
  transactionNumber  String?
  transferInitiatedAt DateTime?
  transferDeliveredAt DateTime?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt

  // Relations
  tenant             Tenant                  @relation(fields: [tenantId], references: [id])
  fromWarehouse      Warehouse               @relation("FromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouse        Warehouse               @relation("ToWarehouse", fields: [toWarehouseId], references: [id])
  entries            WarehouseTransferEntry[]

  @@map("warehouses_transfers")
}


model WarehouseTransferEntry {
  id                String           @id @default(cuid())
  tenantId          String
  warehouseTransferId String
  itemId            String
  quantity          Int
  cost              Decimal
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  warehouseTransfer WarehouseTransfer @relation(fields: [warehouseTransferId], references: [id])
  item              Item              @relation(fields: [itemId], references: [id])

  @@map("warehouses_transfers_entries")
}


// ===========================================
// SYSTEM MODELS  
// ===========================================
model Tenant {
  id             Int       @id @default(autoincrement())
  organizationId String    @unique // Uniqid-based or provided identifier for tenant
  upgradeJobId   String?   // ID of the job managing tenant upgrade, if any
  buildJobId     String?   // ID of the job managing tenant build, if any
  initializedAt  DateTime? // Marks when tenant setup (like DB init) completed
  seededAt       DateTime? // Marks when seed data was populated
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // One-to-many: A tenant can have multiple plan subscriptions
  subscriptions  PlanSubscription[]

  // One-to-one: A tenant can have one metadata entry
  metadata       TenantMetadata?

  @@map("tenants") // Maps to the "tenants" table in the DB
}


model TenantMetadata {
  id           Int       @id @default(autoincrement())
  tenantId     Int       @unique                          // One-to-one with Tenant
  name         String
  industry     String?
  location     String?
  baseCurrency String    @db.Char(3)
  language     String?
  timezone     String?
  dateFormat   String?
  fiscalYear   String?
  primaryColor String?   @db.Char(7)                      // Hex color code like #ffffff
  logoKey      String?
  address      Json?                                     // JSON address structure

  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  tenant       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}


// responsible for (tracking of tenants uploads)
model Import {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  resource  String
  mapping   String
  columns   String
  params    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@map("imports")
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  token      String   // Store a hashed token here
  userId     Int
  tenantId   Int
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])
}


model PaymentLink {
  id           Int      @id @default(autoincrement())
  tenantId     Int
  resourceId   Int
  resourceType String   @db.VarChar(100)
  linkId       String   @unique @db.VarChar(255)
  publicity    String   @db.VarChar(50)
  expiryAt     DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant       Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([resourceType, resourceId])
}

model StripeAccount {
  id         Int      @id @default(autoincrement())
  tenantId   Int      // Foreign key to Tenant
  stripeId   String   // The actual Stripe account ID (e.g., acct_1XyzAbc123)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation to the Tenant
  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@map("stripe_accounts") // Maps to the actual table name in the DB
}

model PlaidItem {
  /// Primary ID for this record
  id           Int       @id @default(autoincrement())

  /// Foreign key referencing the tenant (organization) that owns this Plaid item
  tenantId     Int

  /// Unique identifier for the Plaid item (i.e., a bank account connection)
  plaidItemId  String    @map("plaid_item_id")

  /// Timestamp when this record was created
  createdAt    DateTime  @default(now()) @map("created_at")

  /// Timestamp when this record was last updated
  updatedAt    DateTime  @updatedAt @map("updated_at")

  /// Relation to the Tenant model (each Plaid item belongs to one tenant)
  tenant       Tenant    @relation(fields: [tenantId], references: [id])

  @@map("plaid_items") // Maps this Prisma model to the "plaid_items" table in the database
}


model User {
  id                 Int       @id @default(autoincrement())
  tenantId           Int                                        // Foreign key to Tenant
  firstName          String
  lastName           String
  verified           Boolean   @default(false)                  // Whether user's email is verified
  inviteAcceptedAt   DateTime?                                  // Set when user accepts the invite
  deletedAt          DateTime?                                  // Used for soft deletes
  password           String                                     // Hashed password

  roleId           Int?                                      // FK to Role (optional for invited users)

  // Timestamps
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  tenant             Tenant    @relation(fields: [tenantId], references: [id])
  role               Role?     @relation(fields: [roleId], references: [id])

  @@map("users")  // Map Prisma model to `users` table in DB
}


model UserInvite {
  id              Int       @id @default(autoincrement())
  email           String    // Email of the invited user
  token           String    @unique // Unique invite code (e.g., UUID or random string)
  role            String    // Role the invited user will have (e.g., "admin", "editor", etc.)
  tenantId        Int       // Tenant/org who sent the invite
  invitedByUserId Int       // User who sent the invite

  createdAt       DateTime  @default(now())
  acceptedAt      DateTime? // Set when user accepts invite

  // Relations
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  invitedBy       User      @relation("UserInvites", fields: [invitedByUserId], references: [id])

  @@map("user_invites")
}

model OneClickDemo {
  id         Int      @id @default(autoincrement())
  token      String   @unique // unique slug for the demo link
  tenantId   Int?     // which tenant was spun up for this demo
  usedAt     DateTime? // when user clicked/used the demo
  usedByEmail String?  // who used it, if captured
  createdAt  DateTime @default(now())
  expiresAt  DateTime?

  tenant     Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("oneclick_demos")
}

/// Represents a tax rule that can be applied to invoices, purchases, etc.
/// This table holds reusable tax definitions like GST 18%, VAT 5%, etc.
model TaxRate {
  /// Primary key
  id               Int     @id @default(autoincrement())

  /// Display name of the tax rate (e.g., "GST 18%")
  name             String

  /// Unique code for this tax rate (e.g., "GST18", "VAT5")
  code             String

  /// The percentage rate of the tax (e.g., 18.0 for 18%)
  rate             Float

  /// Optional description for documentation or UI display
  description      String?

  /// Whether this tax is non-recoverable (i.e., cannot be claimed back)
  isNonRecoverable Boolean

  /// Indicates if this tax rate is currently active
  active           Boolean @default(true)

  /// Timestamp when the record was created
  createdAt        DateTime @default(now())

  /// Timestamp when the record was last updated
  updatedAt        DateTime @updatedAt

  /// Inbound relation: All tax transactions associated with this tax rate
  taxRateTransactions TaxRateTransaction[]
}

/// Represents an applied tax instance — e.g., a line item on an invoice or expense.
/// This model links back to the `TaxRate` it was based on.
model TaxRateTransaction {
  /// Primary key
  id         Int       @id @default(autoincrement())

  /// Foreign key linking to the TaxRate that was applied
  taxRateId  Int

  /// Amount of tax applied in this transaction (optional; may be computed)
  amount     Float?

  /// Timestamp when the record was created
  createdAt  DateTime  @default(now())

  /// Timestamp when the record was last updated
  updatedAt  DateTime  @updatedAt

  /// Relation to the TaxRate model
  taxRate    TaxRate   @relation(fields: [taxRateId], references: [id], onDelete: Cascade)
}



// ===========================================
// SUBSCRIPTION/PLAN MODELS
// ===========================================
model Plan {
  id               Int                 @id @default(autoincrement())
  price            Float              // Assuming price is decimal-like
  invoiceInternal  Int
  invoicePeriod    String
  trialPeriod      Int?               // Based on `hasTrial()` method logic
  trialInterval    String?            // Same as above

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  subscriptions    PlanSubscription[] @relation("PlanToSubscription")

  @@map("subscription_plans")         // Maps to actual table name
}

model PlanSubscription {
  id                  Int                    @id @default(autoincrement())
  tenantId            Int
  planId              Int

  lemonSubscriptionId Int?                   // Optional if not always present
  startsAt            DateTime?
  endsAt              DateTime?
  canceledAt          DateTime?
  trialEndsAt         DateTime?
  paymentStatus       SubscriptionPaymentStatus

  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  // RELATIONS
  tenant              Tenant                 @relation(fields: [tenantId], references: [id])
  plan                Plan                   @relation(fields: [planId], references: [id])

  @@map("subscription_plan_subscriptions")   // Match DB table
}



